#+TITLE: Amirrezaask Emacs configuration (a.k.a Hans)
#+AUTHOR: AmirrezaAsk
** Intro
I'm a huge fan of =HansZimmer=, so I call my emacs configuration =Hans=.
*** Important Note
However, this is not some form of an Emacs starter kit, it's simply my personal config with any quirks, 
so don't expect it to has all features like =doom= or =spacemacs=, or any features to be added.
** Why Not Emacs bundles ?
Emacs bundles like =doom= or =spacemacs= or any other one out there are amazing, they are a great way of learning how to organize Emacs configuration but they contain packages and
configurations that I might not use. Actually I used some ideas that I found in Doom-emacs and some configurations of several packages (`ivy` forexample) but I prefer my own configuration
since I know from ground up how I built it so it's much easier for me to add things or fix bugs if they happen.
** Ideas
=Hans= is built around some main ideas, some of them are not implemented yet.
+ First class support for Emacs keybindings.
+ Startup time matters a lot so it should always stay fast as possible.
+ Core should remain as simple as possible.
+ KISS (keep it simple stupid).
+ Modularity comes first .
+ No duplicate packages, focus on one (ex helm & ivy)
** Getting Started
#+BEGIN_SRC sh
# backup your existing .emacs.d
git clone git@gitlab.com:amirrezaask/hans.git ~/.emacs.d
cd ~/.emacs.d
make compile # only first time or after the updates
#+END_SRC
** Terminology
*** Core
=Hans= core consists of a few macros and functions, UI settings, and bootstrap code of =Hans=. This part should stay as small
as possible, and probably some day in the future UI should be dismantled from it as well. A breif introduction to some important
core macros
**** +module
this macro is the main feature that helps me to configure my modules. this macro stores 
all data you pass it and then modules use that data to configure themselves.
**** idle! 
=Hans= idle! macro takes multiple forms and evalutes them when Emacs is idle for 1 sec using =run-with-idle-timer=.

*** Modules
=Hans= modules are a mix of packages and configurations. They conventionaly created using =use-package=, maybe some day if we added
=Evil= we could customize macro to our needs (for keybindings for example).
Each module can recieve =Args= which is basically a form that is defined in user-config and will be set as the module args, forexample look at UI module and user-config file. Module args names are in the form of 
=hans/--module-[MODULENAMEF]-args=.
** Feature Highlight
*** Supported Languages
+ Assembly (MIPS, Haxor)
+ C/C++
+ Clojure
+ Common-Lisp
+ C#
+ Data formats (JSON, YAML, Proto, TOML)
+ Elixir
+ Emacs-lisp
+ F#
+ Go
+ Haskell
+ Java
+ Javascript
+ Kotlin
+ Lua
+ PHP
+ Python
+ Racket
+ Rust
+ Sh (sh scripts)
+ Typescript
+ Web (HTML/CSS)
*** Devops
+ Kuberenets interface
+ Docker interface
+ Ansible
*** Database Interface
+ SQL client (MYSql, PostgreSQL) [only emacs built in I improve them]
+ Mongo Client [TBA]
** Credits & Thanks 
+ =hlissner= (doom-emacs) creator for his amazing optimization ideas.
+ =R.M.S= (Richard Mathew Stallman) for creating =GNU= & =Emacs= the amazing platform we love to use.
+ Creator of all packages we use.
+ Emacs community.
